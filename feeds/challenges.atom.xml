<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>zep's blog - challenges</title><link href="https://7a6570.github.io/" rel="alternate"></link><link href="https://7a6570.github.io/feeds/challenges.atom.xml" rel="self"></link><id>https://7a6570.github.io/</id><updated>2018-05-21T17:13:56+01:00</updated><entry><title>Write-up for hard challenge at SANS Zurich 18</title><link href="https://7a6570.github.io/write-up-for-hard-challenge-at-sans-zurich-18.html" rel="alternate"></link><published>2018-05-21T17:13:56+01:00</published><updated>2018-05-21T17:13:56+01:00</updated><author><name>zep</name></author><id>tag:7a6570.github.io,2018-05-21:/write-up-for-hard-challenge-at-sans-zurich-18.html</id><summary type="html">&lt;p class="first last"&gt;SANS Zurich 18 hard challenge write-up&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This is my write-up for the hard challenge at SANS Zurich 18. The challenges are no longer available at pastebin, but you can get them from my &lt;a class="reference external" href="https://github.com/7a6570/challenges"&gt;git repository&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;First let's download the challenge and check what's all about:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zep@base:~$ get -q https://raw.githubusercontent.com/7a6570/challenges/master/sans_zurich_18/hard/hard_challenge.txt
zep@base:~$ file hard_challenge.txt

hard_challenge.txt: ASCII text, with CRLF line terminators
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like with the medium SANS Zurich challenge, we have again windows line endings and the content looks like base64. Let's fix the line endings and decode the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zep@base:~$ sed -i &lt;span class="s1"&gt;&amp;#39;s|\r||g&amp;#39;&lt;/span&gt; hard_challenge.txt
zep@base:~$ cat hard_challenge.txt &lt;span class="p"&gt;|&lt;/span&gt; base64 -d &amp;gt; hard_challenge_decoded
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's look what we've got:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zep@base:~$ file hard_challenge_decoded

hard_challenge_decoded: ELF &lt;span class="m"&gt;64&lt;/span&gt;-bit LSB executable, x86-64,
version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
&lt;span class="k"&gt;for&lt;/span&gt; GNU/Linux &lt;span class="m"&gt;2&lt;/span&gt;.6.32, BuildID&lt;span class="o"&gt;[&lt;/span&gt;sha1&lt;span class="o"&gt;]=&lt;/span&gt;ac22edc7622454d7aeccf1836dbda66b72c14543, stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nice, this time we have an amd64 linux binary. Let's copy the binary to a Virtual Machine for further analysis, make it executable and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zep@rev_base:~$ chmod +x hard_challenge_decoded
zep@rev_base:~$ ./hard_challenge_decoded
                  .-&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;/.\&lt;/span&gt;
&lt;span class="s1"&gt;                 (_.--&amp;#39;&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
                  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
             o-._ .--..--. _.-o
                 &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;||&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
                  &lt;span class="p"&gt;;&lt;/span&gt;--&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;--:
                  &lt;span class="p"&gt;|&lt;/span&gt;. &lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
                  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;;&lt;/span&gt;_ .&lt;span class="p"&gt;|&lt;/span&gt;
                  &lt;span class="p"&gt;|&lt;/span&gt;_____ &lt;span class="p"&gt;|&lt;/span&gt;
                 /&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;|\&lt;/span&gt;
&lt;span class="s1"&gt;                 //`----&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;
                ////&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="se"&gt;\\&lt;/span&gt;
                /   &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="se"&gt;\&lt;/span&gt;
                   /&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
                  / &lt;span class="se"&gt;\ &lt;/span&gt; / &lt;span class="se"&gt;\&lt;/span&gt;
                 /   &lt;span class="se"&gt;\/&lt;/span&gt;   &lt;span class="se"&gt;\&lt;/span&gt;
                /          &lt;span class="se"&gt;\&lt;/span&gt;
                &lt;span class="p"&gt;|&lt;/span&gt;          &lt;span class="p"&gt;|&lt;/span&gt;
               &lt;span class="o"&gt;||&lt;/span&gt;    /&lt;span class="se"&gt;\ &lt;/span&gt;   &lt;span class="o"&gt;||&lt;/span&gt;
               &lt;span class="o"&gt;||&lt;/span&gt;   ,  .   &lt;span class="o"&gt;||&lt;/span&gt;
               &lt;span class="o"&gt;[[&lt;/span&gt;   NOPE!  &lt;span class="o"&gt;]]&lt;/span&gt;

zep@rev_base:~$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fancy :-) We have to dig deeper. Let's open the binary in IDA. Looking at the available functions, we see that all the important stuff happens in the &lt;strong&gt;main&lt;/strong&gt; function at &lt;tt class="docutils literal"&gt;.text:400666&lt;/tt&gt;. Let's get all xrefs from the main function:&lt;/p&gt;
&lt;img alt="xrefs to main function" src="https://7a6570.github.io/images/xref_main.png" /&gt;
&lt;p&gt;We can see that from the main function &lt;strong&gt;strcmp&lt;/strong&gt;, &lt;strong&gt;puts&lt;/strong&gt;, &lt;strong&gt;ptrace&lt;/strong&gt; and &lt;strong&gt;getenv&lt;/strong&gt; are called. The main function also calls itself, so it seems that we have some sort of recursion (main calls itself which calls again main and so on..). As with any recursive function, there must be some sort of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursion_termination"&gt;recursion termination&lt;/a&gt;. Let's put this thought aside for a moment and let's have a look at the called functions, e.g. &lt;strong&gt;getenv&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;getenv&lt;/strong&gt; is used to get the content of an environment variable and is called two times with the argument &amp;quot;PATH&amp;quot;. That means the value of the environment variable PATH is used somewhere. If we have a look at the &lt;strong&gt;strcmp&lt;/strong&gt; calls, we can see that the value of &amp;quot;PATH&amp;quot; is first compared to &lt;strong&gt;WOOT&lt;/strong&gt;, then the value of &amp;quot;PATH&amp;quot; is retrieved again using &lt;strong&gt;getenv&lt;/strong&gt;, &lt;strong&gt;main&lt;/strong&gt; calls itself and after this recursion returns, the value of &lt;strong&gt;env_path_2nd&lt;/strong&gt; is compared to &lt;strong&gt;WINNER&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="flag condition" src="https://7a6570.github.io/images/cond.png" /&gt;
&lt;p&gt;&lt;strong&gt;WINNER&lt;/strong&gt; sounds good, let's have a look where we get, if the last &lt;strong&gt;strcmp&lt;/strong&gt; evaluates to zero and the right branch is taken from the &lt;strong&gt;jnz&lt;/strong&gt; instruction:&lt;/p&gt;
&lt;img alt="flag decription" src="https://7a6570.github.io/images/flag_decrypt.png" /&gt;
&lt;p&gt;We can spot a lot of local variables, which probably belong to an array of chars which compose the flag string. This means the flag string is built at runtime and is stored encrypted. We can easily spot the used decryption loop and the used counter for this loop. The counter is first set to zero and each loop iteration compared to 31. After 32 loop iterations, the final string is sent to stdout using the &lt;strong&gt;puts&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;Let's start the binary in a debugger and just jump to the first instruction after the &lt;strong&gt;jnz&lt;/strong&gt; instruction, which leads to the flag decryption. But first let's set a breakpoint before the &lt;strong&gt;ptrace&lt;/strong&gt; call, since a program cannot be debugged two times using &lt;strong&gt;ptrace&lt;/strong&gt;. This is some sort of an easy anti-debug trick.&lt;/p&gt;
&lt;img alt="ptrace" src="https://7a6570.github.io/images/ptrace.png" /&gt;
&lt;p&gt;We set a breakpoint at &lt;tt class="docutils literal"&gt;.text:4006C8&lt;/tt&gt; and start the binary in the IDA debugger and continue until we hit our breakpoint. Now we scroll down until we find the instruction at &lt;tt class="docutils literal"&gt;text:4008CE&lt;/tt&gt;, which is the first instruction after all checks passed (WOOT and WINNER string comparisons). Here we set this instruction as the next instruction to execute using the &amp;quot;&lt;strong&gt;SET IP&lt;/strong&gt;&amp;quot; function of IDA (left click on the instruction and choose SET IP). This sets the value of the rip register to &lt;strong&gt;0x4008CE&lt;/strong&gt;. Now we continue the execution by pressing F9. The binary prints the flag on stdout and terminates. To see the flag, IDA must have been started in a terminal (or maybe there is some other way to capture stdout in IDA?). Anyway the flag is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FLAG: ThisisDefinitelyNotaTROLL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We were actually able to get the flag without thinking too much about the checks needed to pass. We just looked where the &amp;quot;success&amp;quot; path goes in the binary and jumped to this path. We were lucky and this time the lazy approach worked ;-)&lt;/p&gt;
&lt;p&gt;But still I think it might be possible to get the flag without using a debugger and changing &lt;strong&gt;$rip&lt;/strong&gt;. Remember the prototype for the main function ?&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;int main(int argc, char* &lt;span class="pre"&gt;argv[],&lt;/span&gt; char* &lt;span class="pre"&gt;env[])&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The third argument is a pointer to the environment. Since the main function of the binary calls itself, a pointer to an environment can be passed. Maybe it could be possible to set the environment this way and to set value of PATH to &amp;quot;WINNER&amp;quot;. The things is, first PATH needs to be equal to &amp;quot;WOOT&amp;quot; and at the second check, PATH needs to be equal to &amp;quot;WINNER&amp;quot;. But we can set the value of PATH only once, before we start to execute the binary.&lt;/p&gt;
</content><category term="challenge"></category><category term="SANS"></category></entry><entry><title>Write-up for medium challenge at SANS Zurich 18</title><link href="https://7a6570.github.io/write-up-for-medium-challenge-at-sans-zurich-18.html" rel="alternate"></link><published>2018-05-03T22:01:38+01:00</published><updated>2018-05-03T22:01:38+01:00</updated><author><name>zep</name></author><id>tag:7a6570.github.io,2018-05-03:/write-up-for-medium-challenge-at-sans-zurich-18.html</id><summary type="html">&lt;p class="first last"&gt;SANS Zurich 18 medium challenge write-up&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This is my write-up for the medium challenge at SANS Zurich 18. The challenges are no longer available at pastebin, but you can get them from my &lt;a class="reference external" href="https://github.com/7a6570/challenges"&gt;git repository&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;First let's download the challenge and check what's all about:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -q https://raw.githubusercontent.com/7a6570/challenges/master/sans_zurich_18/medium/medium_challenge.txt
file medium_challenge.txt
medium_challenge.txt: ASCII text, with CRLF line terminators
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So it seems that this file has &amp;quot;Windows style (CRLF)&amp;quot; line endings, which consist of an &amp;quot;carriage return&amp;quot; and an &amp;quot;line feed&amp;quot; ASCII control character. Then we see that this file is mainly ASCII text, meaning that all bytes of this file lie in the ASCII printable region. Let's have a look at the file in vim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;N3q8ryccAAObDHmThDIAAAAAAAAjAAAAAAAAABHzhZ0AHhoKhu9K1oc2p1UGfYtgZZjK1zmxqdnQ
n2mEIwUO9dwi8jR/ST7v9ozUa0iXvcn/Qxv2yZubFMKXX5u8ROJJCVZqEN7QPDuuUqqTTutU+5AB
igvmTcKYEYXU9vdjX833vpxn0Cl/nCIIt2oOeBDr4Q3d0HbtxDrWnk4Ryw6t0mU8EJ+xcekxdqkO
2R9ilbBhNJGyqpJLTr80d7ckcM9CEAzYpJ0zVdj/H6yygJNMThBjHjRuhHpm+Ak/C3dvQ1OaQSVW
Nxre3AE3bIAitHxbbv/SiFslCIluGGCYm6+mBemIszldnmiEgK9egdXfNu5JMf0K3mcsc+lNmGym

&amp;lt;-- snip --&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see only chars from a-z, A-Z, 0-9, + and /. Smells like Base64. But wait: Above we have seen, that this file has &amp;quot;Windows&amp;quot; line endings. Linux tools don't like them, so let's first convert them to Unix / Linux endings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i &lt;span class="s1"&gt;&amp;#39;s|\r||g&amp;#39;&lt;/span&gt; medium_challenge.txt
file medium_challenge.txt
medium_challenge.txt: ASCII text
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks better :-) We just removed the carriage return ASCII control char (CR), which is the first part of the &amp;quot;Windows&amp;quot; line ending. The seconds part is the line feed (LF) control sequence, which is the way line endings are marked in Unix and Linux. Let's decode the Base64 encoded file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat medium_challenge.txt &lt;span class="p"&gt;|&lt;/span&gt; base64 -d &amp;gt; medium_challenge_decoded
file medium_challenge_decoded
medium_challenge_decoded: &lt;span class="m"&gt;7&lt;/span&gt;-zip archive data, version &lt;span class="m"&gt;0&lt;/span&gt;.3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we were right. The file was a Base64 encoded 7z archive. Let's extract the archive and see what we will find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;7z x medium_challenge_decoded

Scanning the drive &lt;span class="k"&gt;for&lt;/span&gt; archives:
&lt;span class="m"&gt;1&lt;/span&gt; file, &lt;span class="m"&gt;12999&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt; KiB&lt;span class="o"&gt;)&lt;/span&gt;

Extracting archive: medium_challenge_decoded
--
&lt;span class="nv"&gt;Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; medium_challenge_decoded
&lt;span class="nv"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 7z
Physical &lt;span class="nv"&gt;Size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;12999&lt;/span&gt;
Headers &lt;span class="nv"&gt;Size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;222&lt;/span&gt;
&lt;span class="nv"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; LZMA:23
&lt;span class="nv"&gt;Solid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; +
&lt;span class="nv"&gt;Blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

Everything is Ok

Files: &lt;span class="m"&gt;2&lt;/span&gt;
Size:       &lt;span class="m"&gt;67194&lt;/span&gt;
Compressed: &lt;span class="m"&gt;12999&lt;/span&gt;

ls
crypto.js  index.html  medium_challenge_decoded  medium_challenge.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interesting. We have two files: index.html and crypto.js. Let's first open index.html in a browser:&lt;/p&gt;
&lt;img alt="index.html" src="https://7a6570.github.io/images/sans18_medium_index.png" /&gt;
&lt;p&gt;We see some scrambled output, which is labeled with &amp;quot;decrypted&amp;quot;. Each time we refresh the page, the scrambled output changes. So this means, we're supposed to decrypt something to get our flag. Let's have a look at crypto.js. First of all, this file is quite big, 800 lines of javascript code. Looks like crypto stuff and is probably a crypto library. Let's move on and have a look at index.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="na"&gt;snip&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;crypto.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x6F\x6E\x6C\x6F\x61\x64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x65\x6E\x63\x6F\x64\x65\x48\x65\x78&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x70\x72\x6F\x74\x6F\x74\x79\x70\x65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x6C\x65\x6E\x67\x74\x68&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x63\x68\x61\x72\x43\x6F\x64\x65\x41\x74&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x70\x75\x73\x68&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x73\x69\x6E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x66\x6C\x6F\x6F\x72&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x66\x72\x6F\x6D\x43\x68\x61\x72\x43\x6F\x64\x65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x6E\x6F\x77&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x72\x6F\x75\x6E\x64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x6E\x30\x54\x5F\x4D\x79\x5F\x70\x61\x73\x73\x57\x30\x72\x44\x21&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x62\x32\x64\x33\x63\x66\x35\x36\x37\x64\x35\x66\x34\x62\x37\x32\x66\x38\x62\x33\x65\x32\x39\x37\x65\x39\x33\x65\x35\x32\x66\x32\x66\x33\x66\x33\x63\x37\x32\x31\x32\x66\x38\x65\x30\x38\x34\x66\x33\x63\x38\x66\x30\x31\x63\x34\x61\x64\x66\x34\x39\x66\x66\x32\x64\x66\x35\x39\x38\x35\x37\x39\x36\x65\x64\x32\x38\x39\x62\x39\x39\x30\x32\x34\x66\x37\x39\x63\x34\x37\x34\x37\x62\x65\x66\x64\x31\x64\x66\x66\x38\x34\x33\x65\x32\x38\x34\x39\x36\x39\x61\x65\x35\x36\x65\x39\x31\x35\x64\x61\x63\x66\x66\x65\x36\x65\x66\x61\x63\x64\x65\x65\x38\x38\x31\x63\x30\x38\x32\x35\x34\x35\x62\x37\x63\x34\x32\x66\x63\x36\x64\x63\x64\x39\x66\x38\x31\x35\x61\x36\x62\x32\x30\x37\x63\x32\x30\x39\x38\x65\x34\x38\x34\x38\x30\x64\x62\x63\x39\x65\x66\x37\x34\x34\x63\x38\x33\x62\x31\x38\x63\x62\x39\x37\x39\x61\x35\x63\x39\x34\x34\x31\x38\x34\x61\x35\x33\x65\x30\x30\x64\x37\x30\x33\x65\x65\x64\x37\x63\x37\x38\x63\x64\x63\x36\x30\x61\x35\x35\x34\x38\x39&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x74\x6F\x42\x79\x74\x65\x73&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x68\x65\x78&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x75\x74\x69\x6C\x73&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x63\x74\x72&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x4D\x6F\x64\x65\x4F\x66\x4F\x70\x65\x72\x61\x74\x69\x6F\x6E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x64\x65\x63\x72\x79\x70\x74&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x66\x72\x6F\x6D\x42\x79\x74\x65\x73&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x75\x74\x66\x38&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x64\x65\x63\x72\x79\x70\x74\x65\x64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x67\x65\x74\x45\x6C\x65\x6D\x65\x6E\x74\x42\x79\x49\x64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x69\x6E\x6E\x65\x72\x48\x54\x4D\x4C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x74\x69\x6D\x65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x49\x74\x20\x68\x61\x73\x20\x62\x65\x65\x6E\x20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x20\x73\x65\x63\x6F\x6E\x64\x73\x20\x73\x69\x6E\x63\x65\x20\x74\x68\x65\x20\x65\x6E\x63\x72\x79\x70\x74\x69\x6F\x6E\x20\x66\x75\x6E\x63\x74\x69\x6F\x6E\x20\x6C\x61\x73\x74\x20\x72\x61\x6E\x2E&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="p"&gt;))};&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x3&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x9&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x4&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x6&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x8&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x6&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x2&lt;/span&gt;&lt;span class="p"&gt;))};&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x9&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]]();&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x3&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]();&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xa&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xa&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4xf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4xe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x10&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x10&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_0x35b4x9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1522951291439&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;_0xde32&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="na"&gt;snip&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now it's starting to get interesting. We see some obfuscated javascript code. A quick way to auto deobfuscate is &lt;a class="reference external" href="http://jsnice.org/"&gt;jsnice.org&lt;/a&gt;. Just copy the obfuscated javascript code and let jsnice do the heavy work. Jsnice was able to break up the long string into meaningfull blocks. It also added usefull type information, but some sort of obfuscation is still there: At the top, the array _0xde32 is defined. A lot of object attributes are resolved by getting their name from this array. So we have first to substitute all references made to this array, which leads to this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;  0 &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;  1 &lt;/span&gt;&lt;span class="cm"&gt;/** @type {!Array} */&lt;/span&gt;
&lt;span class="lineno"&gt;  2 &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0xde32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="lineno"&gt;  3 &lt;/span&gt;
&lt;span class="lineno"&gt;  4 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="lineno"&gt;  5 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;encodeHex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="lineno"&gt;  6 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prototype&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="lineno"&gt;  7 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="lineno"&gt;  8 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;charCodeAt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="lineno"&gt;  9 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;push&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="lineno"&gt; 10 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="lineno"&gt; 11 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;floor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="lineno"&gt; 12 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                     &lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;span class="lineno"&gt; 13 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fromCharCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="c1"&gt;// 9&lt;/span&gt;
&lt;span class="lineno"&gt; 14 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;now&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="lineno"&gt; 15 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;round&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="lineno"&gt; 16 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="c1"&gt;// 12&lt;/span&gt;
&lt;span class="lineno"&gt; 17 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b2d3cf567d5f4b72f8b3e297e93e52f2f3f3c7212f8e084f3c8f01c4adf49ff2df5985796ed289b99024f79c4747befd1dff843e284969ae56e915dacffe6efacdee881c082545b7c42fc6dcd9f815a6b207c2098e48480dbc9ef744c83b18cb979a5c944184a53e00d703eed7c78cdc60a55489&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="lineno"&gt; 18 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;toBytes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;span class="lineno"&gt; 19 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;span class="lineno"&gt; 20 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;// 16&lt;/span&gt;
&lt;span class="lineno"&gt; 21 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ctr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;// 17&lt;/span&gt;
&lt;span class="lineno"&gt; 22 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ModeOfOperation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;// 18&lt;/span&gt;
&lt;span class="lineno"&gt; 23 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;decrypt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="c1"&gt;// 19&lt;/span&gt;
&lt;span class="lineno"&gt; 24 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fromBytes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="lineno"&gt; 25 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;// 21&lt;/span&gt;
&lt;span class="lineno"&gt; 26 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;decrypted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// 22&lt;/span&gt;
&lt;span class="lineno"&gt; 27 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getElementById&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c1"&gt;// 23&lt;/span&gt;
&lt;span class="lineno"&gt; 28 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;innerHTML&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;span class="lineno"&gt; 29 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;// 25&lt;/span&gt;
&lt;span class="lineno"&gt; 30 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It has been &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="lineno"&gt; 31 &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; seconds since the encryption function last ran.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="lineno"&gt; 32 &lt;/span&gt;
&lt;span class="lineno"&gt; 33 &lt;/span&gt;
&lt;span class="lineno"&gt; 34 &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="lineno"&gt; 35 &lt;/span&gt;&lt;span class="cm"&gt; * @return {undefined}&lt;/span&gt;
&lt;span class="lineno"&gt; 36 &lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="lineno"&gt; 37 &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 38 &lt;/span&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="lineno"&gt; 39 &lt;/span&gt;&lt;span class="cm"&gt;   * @return {?}&lt;/span&gt;
&lt;span class="lineno"&gt; 40 &lt;/span&gt;&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="lineno"&gt; 41 &lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 42 &lt;/span&gt;    &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt; 43 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResi&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 44 &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 45 &lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 46 &lt;/span&gt;  &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="lineno"&gt; 47 &lt;/span&gt;&lt;span class="cm"&gt;   * @param {?} arr&lt;/span&gt;
&lt;span class="lineno"&gt; 48 &lt;/span&gt;&lt;span class="cm"&gt;   * @param {number} reverse&lt;/span&gt;
&lt;span class="lineno"&gt; 49 &lt;/span&gt;&lt;span class="cm"&gt;   * @return {?}&lt;/span&gt;
&lt;span class="lineno"&gt; 50 &lt;/span&gt;&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="lineno"&gt; 51 &lt;/span&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 52 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 53 &lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 54 &lt;/span&gt;      &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt; 55 &lt;/span&gt;      &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 56 &lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 57 &lt;/span&gt;    &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt; 58 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 59 &lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 60 &lt;/span&gt;      &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="lineno"&gt; 61 &lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 62 &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 63 &lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 64 &lt;/span&gt;
&lt;span class="lineno"&gt; 65 &lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="lineno"&gt; 66 &lt;/span&gt;&lt;span class="cm"&gt;   * @return {?}&lt;/span&gt;
&lt;span class="lineno"&gt; 67 &lt;/span&gt;&lt;span class="cm"&gt;   */&lt;/span&gt;
&lt;span class="lineno"&gt; 68 &lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encodeHex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 69 &lt;/span&gt;
&lt;span class="lineno"&gt; 70 &lt;/span&gt;    &lt;span class="cm"&gt;/** @type {!Array} */&lt;/span&gt;
&lt;span class="lineno"&gt; 71 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;harderTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="lineno"&gt; 72 &lt;/span&gt;    &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt; 73 &lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 74 &lt;/span&gt;
&lt;span class="lineno"&gt; 75 &lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 76 &lt;/span&gt;      &lt;span class="nx"&gt;harderTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="lineno"&gt; 77 &lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt; 78 &lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;harderTypes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 79 &lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="lineno"&gt; 80 &lt;/span&gt;
&lt;span class="lineno"&gt; 81 &lt;/span&gt;
&lt;span class="lineno"&gt; 82 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;lastResi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="lineno"&gt; 83 &lt;/span&gt;
&lt;span class="lineno"&gt; 84 &lt;/span&gt;  &lt;span class="nx"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 85 &lt;/span&gt;
&lt;span class="lineno"&gt; 86 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;scriptPubKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;encodeHex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="lineno"&gt; 87 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data_as_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="lineno"&gt; 88 &lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;b2d3cf567d5f4b72f8b3e297e93e52f2f3f3c7212f8e084f3c8f01c4adf49ff2df5985796ed289b99024f79c4747befd1dff843e284969ae56e915dacffe6efacdee881c082545b7c42fc6dcd9f815a6b207c2098e48480dbc9ef744c83b18cb979a5c944184a53e00d703eed7c78cdc60a55489&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 89 &lt;/span&gt;
&lt;span class="lineno"&gt; 90 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_as_string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 91 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;command_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ModeOfOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scriptPubKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 92 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rightContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;command_codes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 93 &lt;/span&gt;
&lt;span class="lineno"&gt; 94 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aesjs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 95 &lt;/span&gt;
&lt;span class="lineno"&gt; 96 &lt;/span&gt;
&lt;span class="lineno"&gt; 97 &lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mergedLocationContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;decrypted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt; 98 &lt;/span&gt;  &lt;span class="nx"&gt;mergedLocationContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 99 &lt;/span&gt;  &lt;span class="nx"&gt;mergedLocationContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrypted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;100 &lt;/span&gt;  &lt;span class="nx"&gt;mergedLocationContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;101 &lt;/span&gt;
&lt;span class="lineno"&gt;102 &lt;/span&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_0x35b4x10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="lineno"&gt;103 &lt;/span&gt;
&lt;span class="lineno"&gt;104 &lt;/span&gt;  &lt;span class="nx"&gt;_0x35b4x10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;It has been&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastResi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="lineno"&gt;105 &lt;/span&gt;  &lt;span class="mi"&gt;1522951291439&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;seconds since the encryption function last ran&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;106 &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interesting part starts at line 90: data_as_string is converted to bytes by an util method from aesjs. So aesjs is the crypto library we have seen earlier. It seems data_as_string contains the encrypted flag. At line 91 we see that AES in counter block mode is used. Let's check the documentation of aesjs to understand the function call &lt;em&gt;aesjs.ModeOfOperation.ctr(scriptPubKey)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We find &lt;a class="reference external" href="https://github.com/ricmoo/aes-js"&gt;aesjs&lt;/a&gt; at github:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// Convert text to bytes
var text = 'Text may be any length you wish, no padding is required.';
var textBytes = aesjs.utils.utf8.toBytes(text);

// The counter is optional, and if omitted will begin at 1
var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));
var encryptedBytes = aesCtr.encrypt(textBytes);
&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;aesjs.ModeOfOperation.ctr&lt;/em&gt; returns a new aesjs object. The first argument is the key, the seconds argument is the used counter, if omitted the counter starts at 1. In our case, the key is returned by the function &lt;em&gt;set&lt;/em&gt; (line 86). This function takes two arguments: The first is &lt;em&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/em&gt; and the second is a rounded value returned by the &lt;em&gt;rev&lt;/em&gt; function. Let's have a look at the &lt;em&gt;set&lt;/em&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 0 &lt;/span&gt; &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="lineno"&gt; 1 &lt;/span&gt;&lt;span class="cm"&gt;  * @param {?} arr&lt;/span&gt;
&lt;span class="lineno"&gt; 2 &lt;/span&gt;&lt;span class="cm"&gt;  * @param {number} reverse&lt;/span&gt;
&lt;span class="lineno"&gt; 3 &lt;/span&gt;&lt;span class="cm"&gt;  * @return {?}&lt;/span&gt;
&lt;span class="lineno"&gt; 4 &lt;/span&gt;&lt;span class="cm"&gt;  */&lt;/span&gt;
&lt;span class="lineno"&gt; 5 &lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 6 &lt;/span&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt; 7 &lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt; 8 &lt;/span&gt;     &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt; 9 &lt;/span&gt;     &lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;10 &lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt;11 &lt;/span&gt;   &lt;span class="cm"&gt;/** @type {number} */&lt;/span&gt;
&lt;span class="lineno"&gt;12 &lt;/span&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;13 &lt;/span&gt;   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt;14 &lt;/span&gt;     &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="lineno"&gt;15 &lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="lineno"&gt;16 &lt;/span&gt;   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="lineno"&gt;17 &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function loops over every character of &lt;em&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/em&gt; and xors it with the value &lt;em&gt;reverse&lt;/em&gt; (line 13-14). This means, that &lt;em&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/em&gt; is the xor'd key to decrypt data_as_string. The key is xor'd with an unknown value so that's more difficult to get the real key, which is used to decrypt the AES cipher text. We don't know the value which is used to xor &lt;em&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/em&gt; with, but we can say something about its size: Since the size of the AES key must be the same after it has been xor'd and the key is plain ASCII and 16 bytes long, we can deduce that the xor key must have the size of one byte. This gives only &lt;em&gt;256&lt;/em&gt; different xor keys, which could have been used to encrypt the needed AES key.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ASCII char:     n  0  T  _  M  y  _  p  a  s  s  W  0  r  D  !
value in hex:   6e 30 54 5f 4d 79 5f 70 61 73 73 57 30 72 44 21

size = 16 bytes
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt;0 &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="lineno"&gt;1 &lt;/span&gt;          &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="lineno"&gt;2 &lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore the function &lt;em&gt;set&lt;/em&gt; loops over each character and xors each character individually. The functions &lt;em&gt;charCodeAt&lt;/em&gt; and &lt;em&gt;fromCharCode&lt;/em&gt; would support Unicode, but then this would change the size of the AES key. (Ever tried to xor 255 with say 400 ? This no longer fits into one byte)&lt;/p&gt;
&lt;p&gt;Lets summarize what we have so far:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An encrypted AES cipher text &lt;em&gt;data_as_string&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;An xor encrypted AES key: &lt;em&gt;&amp;quot;n0T_My_passW0rD!&amp;quot;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cipher: AES 128 with counter mode&lt;/li&gt;
&lt;li&gt;The xor key used to encrypt the AES key is only one byte in size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's just brute-force the value for the xor key, the key space is very small, there are only 256 different values. To do this, we'll just xor the AES key with every value from 0 to 255. This will give 256 different AES keys, of which only one is valid. Then just decrypt the cipher text with every of these 256 keys. But how do we know, which of the resulting 256 decrypted cipher text is the right ? We know that the decrypted cipher text must be valid UTF-8, since the decrypted data is decoded as UTF-8 by the function &lt;em&gt;aesjs.utils.utf8.fromBytes(rightContent)&lt;/em&gt; (line 94). We can therefore just try to decode each of these 256 results as UTF-8 and see which ones are valid.&lt;/p&gt;
&lt;p&gt;To decrypt the cipher text, we'll use the &lt;em&gt;pycrypto&lt;/em&gt; python library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="lineno"&gt; 0 &lt;/span&gt; &lt;span class="c1"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="lineno"&gt; 1 &lt;/span&gt;
&lt;span class="lineno"&gt; 2 &lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Cipher&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;
&lt;span class="lineno"&gt; 3 &lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Crypto.Util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="lineno"&gt; 4 &lt;/span&gt;
&lt;span class="lineno"&gt; 5 &lt;/span&gt;
&lt;span class="lineno"&gt; 6 &lt;/span&gt; &lt;span class="n"&gt;encrypted_aes_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n0T_My_passW0rD!&amp;#39;&lt;/span&gt;
&lt;span class="lineno"&gt; 7 &lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b2d3cf567d5f4b72f8b3e297e93e52f2f3f3c7212f8e084f3c8f01c4adf49ff2df5985796ed289b99024f79c4747befd1dff843e284969ae56e915dacffe6efacdee881c082545b7c42fc6dcd9f815a6b207c2098e48480dbc9ef744c83b18cb979a5c944184a53e00d703eed7c78cdc60a55489&amp;#39;&lt;/span&gt;
&lt;span class="lineno"&gt; 8 &lt;/span&gt;
&lt;span class="lineno"&gt; 9 &lt;/span&gt;
&lt;span class="lineno"&gt;10 &lt;/span&gt; &lt;span class="n"&gt;cipherbytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromhex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="lineno"&gt;11 &lt;/span&gt;
&lt;span class="lineno"&gt;12 &lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="lineno"&gt;13 &lt;/span&gt;
&lt;span class="lineno"&gt;14 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xor_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="lineno"&gt;15 &lt;/span&gt;
&lt;span class="lineno"&gt;16 &lt;/span&gt;     &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="lineno"&gt;17 &lt;/span&gt;
&lt;span class="lineno"&gt;18 &lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;encrypted_aes_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="lineno"&gt;19 &lt;/span&gt;
&lt;span class="lineno"&gt;20 &lt;/span&gt;             &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;xor_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="lineno"&gt;21 &lt;/span&gt;
&lt;span class="lineno"&gt;22 &lt;/span&gt;     &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;xor_key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="lineno"&gt;23 &lt;/span&gt;
&lt;span class="lineno"&gt;24 &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;xor_key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="lineno"&gt;25 &lt;/span&gt;
&lt;span class="lineno"&gt;26 &lt;/span&gt;     &lt;span class="n"&gt;ctr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="lineno"&gt;27 &lt;/span&gt;     &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MODE_CTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="lineno"&gt;28 &lt;/span&gt;     &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipherbytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="lineno"&gt;29 &lt;/span&gt;
&lt;span class="lineno"&gt;30 &lt;/span&gt;     &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="lineno"&gt;31 &lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="lineno"&gt;32 &lt;/span&gt;     &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="lineno"&gt;33 &lt;/span&gt;         &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives us right away the searched flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./decrypt.py
This is some data that I am totally encrypting in a very secure manner. Also the flag is: notReallyVeryRandomNowIsIt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One important point to mention: the Counter object &lt;em&gt;ctr&lt;/em&gt; is stateful, meaning that it must be instanced seperately for each key (line 26).&lt;/p&gt;
&lt;p&gt;You can find the script &lt;a class="reference external" href="https://github.com/7a6570/challenges/tree/master/sans_zurich_18/medium"&gt;here&lt;/a&gt;:&lt;/p&gt;
</content><category term="challenge"></category><category term="SANS"></category></entry></feed>